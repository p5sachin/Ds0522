{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b7472d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn .ensemble import RandomForestClassifier\n",
    "from sklearn .metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "91a1d963",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"https://raw.githubusercontent.com/dsrscientist/DSData/master/winequality-red.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1816b3ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol  quality  \n",
       "0      9.4        5  \n",
       "1      9.8        5  \n",
       "2      9.8        5  \n",
       "3      9.8        6  \n",
       "4      9.4        5  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "faeba6e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1599, 12)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df .shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5887bfcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fixed acidity           0\n",
       "volatile acidity        0\n",
       "citric acid             0\n",
       "residual sugar          0\n",
       "chlorides               0\n",
       "free sulfur dioxide     0\n",
       "total sulfur dioxide    0\n",
       "density                 0\n",
       "pH                      0\n",
       "sulphates               0\n",
       "alcohol                 0\n",
       "quality                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df .isnull() .sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b23ca2ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.319637</td>\n",
       "      <td>0.527821</td>\n",
       "      <td>0.270976</td>\n",
       "      <td>2.538806</td>\n",
       "      <td>0.087467</td>\n",
       "      <td>15.874922</td>\n",
       "      <td>46.467792</td>\n",
       "      <td>0.996747</td>\n",
       "      <td>3.311113</td>\n",
       "      <td>0.658149</td>\n",
       "      <td>10.422983</td>\n",
       "      <td>5.636023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.741096</td>\n",
       "      <td>0.179060</td>\n",
       "      <td>0.194801</td>\n",
       "      <td>1.409928</td>\n",
       "      <td>0.047065</td>\n",
       "      <td>10.460157</td>\n",
       "      <td>32.895324</td>\n",
       "      <td>0.001887</td>\n",
       "      <td>0.154386</td>\n",
       "      <td>0.169507</td>\n",
       "      <td>1.065668</td>\n",
       "      <td>0.807569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.600000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.012000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.990070</td>\n",
       "      <td>2.740000</td>\n",
       "      <td>0.330000</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.100000</td>\n",
       "      <td>0.390000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>1.900000</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.995600</td>\n",
       "      <td>3.210000</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>0.520000</td>\n",
       "      <td>0.260000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>0.079000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>0.996750</td>\n",
       "      <td>3.310000</td>\n",
       "      <td>0.620000</td>\n",
       "      <td>10.200000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.200000</td>\n",
       "      <td>0.640000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.997835</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>0.730000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>15.900000</td>\n",
       "      <td>1.580000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>15.500000</td>\n",
       "      <td>0.611000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>289.000000</td>\n",
       "      <td>1.003690</td>\n",
       "      <td>4.010000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.900000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fixed acidity  volatile acidity  citric acid  residual sugar  \\\n",
       "count    1599.000000       1599.000000  1599.000000     1599.000000   \n",
       "mean        8.319637          0.527821     0.270976        2.538806   \n",
       "std         1.741096          0.179060     0.194801        1.409928   \n",
       "min         4.600000          0.120000     0.000000        0.900000   \n",
       "25%         7.100000          0.390000     0.090000        1.900000   \n",
       "50%         7.900000          0.520000     0.260000        2.200000   \n",
       "75%         9.200000          0.640000     0.420000        2.600000   \n",
       "max        15.900000          1.580000     1.000000       15.500000   \n",
       "\n",
       "         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\n",
       "count  1599.000000          1599.000000           1599.000000  1599.000000   \n",
       "mean      0.087467            15.874922             46.467792     0.996747   \n",
       "std       0.047065            10.460157             32.895324     0.001887   \n",
       "min       0.012000             1.000000              6.000000     0.990070   \n",
       "25%       0.070000             7.000000             22.000000     0.995600   \n",
       "50%       0.079000            14.000000             38.000000     0.996750   \n",
       "75%       0.090000            21.000000             62.000000     0.997835   \n",
       "max       0.611000            72.000000            289.000000     1.003690   \n",
       "\n",
       "                pH    sulphates      alcohol      quality  \n",
       "count  1599.000000  1599.000000  1599.000000  1599.000000  \n",
       "mean      3.311113     0.658149    10.422983     5.636023  \n",
       "std       0.154386     0.169507     1.065668     0.807569  \n",
       "min       2.740000     0.330000     8.400000     3.000000  \n",
       "25%       3.210000     0.550000     9.500000     5.000000  \n",
       "50%       3.310000     0.620000    10.200000     6.000000  \n",
       "75%       3.400000     0.730000    11.100000     6.000000  \n",
       "max       4.010000     2.000000    14.900000     8.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df .describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bf12fd28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x23cbb3244c0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x= 'quality', data = df, kind = 'count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "62169dd5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='quality', ylabel='volatile acidity'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot = plt .figure(figsize=(5,5))\n",
    "sns.barplot(x='quality',y = 'volatile acidity',data = df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6328296d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='quality', ylabel='citric acid'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot = plt .figure(figsize=(5,5))\n",
    "sns.barplot(x='quality',y = 'citric acid',data = df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0afaba4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "correlation = df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0071b988",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Format specifier missing precision",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [17]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m10\u001b[39m))\n\u001b[1;32m----> 2\u001b[0m \u001b[43msns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheatmap\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcorrelation\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcbar\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msquare\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfmt\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m.if\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mannot\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mannot_kws\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msize\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[38;5;241;43m8\u001b[39;49m\u001b[43m}\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcmap\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mBlues\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mE:\\Software\\anaconda\\lib\\site-packages\\seaborn\\_decorators.py:46\u001b[0m, in \u001b[0;36m_deprecate_positional_args.<locals>.inner_f\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     36\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m     37\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPass the following variable\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m as \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124mkeyword arg\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     38\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFrom version 0.12, the only valid positional argument \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     43\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m\n\u001b[0;32m     44\u001b[0m     )\n\u001b[0;32m     45\u001b[0m kwargs\u001b[38;5;241m.\u001b[39mupdate({k: arg \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args)})\n\u001b[1;32m---> 46\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m f(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mE:\\Software\\anaconda\\lib\\site-packages\\seaborn\\matrix.py:553\u001b[0m, in \u001b[0;36mheatmap\u001b[1;34m(data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, linewidths, linecolor, cbar, cbar_kws, cbar_ax, square, xticklabels, yticklabels, mask, ax, **kwargs)\u001b[0m\n\u001b[0;32m    551\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m square:\n\u001b[0;32m    552\u001b[0m     ax\u001b[38;5;241m.\u001b[39mset_aspect(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mequal\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 553\u001b[0m \u001b[43mplotter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcbar_ax\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    554\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m ax\n",
      "File \u001b[1;32mE:\\Software\\anaconda\\lib\\site-packages\\seaborn\\matrix.py:348\u001b[0m, in \u001b[0;36m_HeatMapper.plot\u001b[1;34m(self, ax, cax, kws)\u001b[0m\n\u001b[0;32m    346\u001b[0m \u001b[38;5;66;03m# Annotate the cells with the formatted values\u001b[39;00m\n\u001b[0;32m    347\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mannot:\n\u001b[1;32m--> 348\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_annotate_heatmap\u001b[49m\u001b[43m(\u001b[49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmesh\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mE:\\Software\\anaconda\\lib\\site-packages\\seaborn\\matrix.py:256\u001b[0m, in \u001b[0;36m_HeatMapper._annotate_heatmap\u001b[1;34m(self, ax, mesh)\u001b[0m\n\u001b[0;32m    254\u001b[0m lum \u001b[38;5;241m=\u001b[39m relative_luminance(color)\n\u001b[0;32m    255\u001b[0m text_color \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m.15\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m lum \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m.408\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mw\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m--> 256\u001b[0m annotation \u001b[38;5;241m=\u001b[39m \u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m{\u001b[39;49m\u001b[38;5;124;43m:\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfmt\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m}\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mformat\u001b[49m\u001b[43m(\u001b[49m\u001b[43mval\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    257\u001b[0m text_kwargs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mdict\u001b[39m(color\u001b[38;5;241m=\u001b[39mtext_color, ha\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcenter\u001b[39m\u001b[38;5;124m\"\u001b[39m, va\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcenter\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    258\u001b[0m text_kwargs\u001b[38;5;241m.\u001b[39mupdate(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mannot_kws)\n",
      "\u001b[1;31mValueError\u001b[0m: Format specifier missing precision"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "sns.heatmap(correlation, cbar=True, square=True, fmt ='.if', annot = True, annot_kws={'size':8}, cmap = 'Blues')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2c4d7d44",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df .drop('quality',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "71ab313c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
      "0               7.4             0.700         0.00             1.9      0.076   \n",
      "1               7.8             0.880         0.00             2.6      0.098   \n",
      "2               7.8             0.760         0.04             2.3      0.092   \n",
      "3              11.2             0.280         0.56             1.9      0.075   \n",
      "4               7.4             0.700         0.00             1.9      0.076   \n",
      "...             ...               ...          ...             ...        ...   \n",
      "1594            6.2             0.600         0.08             2.0      0.090   \n",
      "1595            5.9             0.550         0.10             2.2      0.062   \n",
      "1596            6.3             0.510         0.13             2.3      0.076   \n",
      "1597            5.9             0.645         0.12             2.0      0.075   \n",
      "1598            6.0             0.310         0.47             3.6      0.067   \n",
      "\n",
      "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
      "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
      "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
      "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
      "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
      "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
      "...                   ...                   ...      ...   ...        ...   \n",
      "1594                 32.0                  44.0  0.99490  3.45       0.58   \n",
      "1595                 39.0                  51.0  0.99512  3.52       0.76   \n",
      "1596                 29.0                  40.0  0.99574  3.42       0.75   \n",
      "1597                 32.0                  44.0  0.99547  3.57       0.71   \n",
      "1598                 18.0                  42.0  0.99549  3.39       0.66   \n",
      "\n",
      "      alcohol  \n",
      "0         9.4  \n",
      "1         9.8  \n",
      "2         9.8  \n",
      "3         9.8  \n",
      "4         9.4  \n",
      "...       ...  \n",
      "1594     10.5  \n",
      "1595     11.2  \n",
      "1596     11.0  \n",
      "1597     10.2  \n",
      "1598     11.0  \n",
      "\n",
      "[1599 rows x 11 columns]\n"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3c151678",
   "metadata": {},
   "outputs": [],
   "source": [
    " Y = df['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b7f6ac26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       0\n",
      "1       0\n",
      "2       0\n",
      "3       0\n",
      "4       0\n",
      "       ..\n",
      "1594    0\n",
      "1595    0\n",
      "1596    0\n",
      "1597    0\n",
      "1598    0\n",
      "Name: quality, Length: 1599, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d8d9af39",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a1916e6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1599,) (1279,) (320,)\n"
     ]
    }
   ],
   "source": [
    "print(Y.shape, Y_train.shape, Y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b7c1d2f",
   "metadata": {},
   "source": [
    "model.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "514e029e",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "af585557",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0acb5223",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'RandomForestClassifier' object has no attribute 'prediction'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Input \u001b[1;32mIn [30]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m X_test_prediction \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprediction\u001b[49m(X_test)\n\u001b[0;32m      2\u001b[0m test_data_accuracy \u001b[38;5;241m=\u001b[39m accuracy_score(X_test_prediction, Y_test)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'RandomForestClassifier' object has no attribute 'prediction'"
     ]
    }
   ],
   "source": [
    "X_test_prediction = model.prediction(X_test)\n",
    "test_data_accuracy = accuracy_score(X_test_prediction, Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "31f22308",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'test_data_accuracy' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [32]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAccuracy :\u001b[39m\u001b[38;5;124m'\u001b[39m , \u001b[43mtest_data_accuracy\u001b[49m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'test_data_accuracy' is not defined"
     ]
    }
   ],
   "source": [
    "print ('Accuracy :' , test_data_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1abe980b",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (372833694.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [33]\u001b[1;36m\u001b[0m\n\u001b[1;33m    input_data = (7,3,0,65,0,0,1,2,0.065,15.0.21.0,0.9946,3.39,0.47,10.0)\u001b[0m\n\u001b[1;37m                                             ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c610e353",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
